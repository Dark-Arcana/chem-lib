plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.163'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

version = "$minecraft_version-$mod_version"
group = 'com.smashingmods'
base {
    archivesName = 'chemlib'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

runs {
    configureEach { net.neoforged.gradle.dsl.common.runs.run.Run run ->
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        systemProperty 'forge.logging.console.level', 'debug'

        if (run.project.javaToolchains.launcherFor(java.toolchain).map { it.metadata.vendor }.getOrElse("").contains("JetBrains")) {
            run.jvmArgument("-XX:+AllowEnhancedClassRedefinition")
        }

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', "${mod_id}"
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', "${mod_id}"
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', "${mod_id}"
    }

    data {
        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    maven { url "https://maven.blamejared.com/" }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    localRuntime "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_id}",
                "Specification-Vendor"    : "SmashingMods",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "SmashingMods",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def secrets = new Properties()
file('secrets.properties').withInputStream {
    stream -> secrets.load(stream)
}

fileTree("secrets").matching {
    include "**/*.properties"
}.each {
    File file ->
        file.withInputStream {
            stream -> secrets.load(stream)
        }
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            afterEvaluate {
                artifact project.jar
                artifact project.sourcesJar
                artifact project.javadocJar
            }
            setGroupId 'smashingmods'
            setArtifactId 'chemlib'
        }
    }
    repositories {
        maven {
            url "https://maven.tamaized.com/releases"
            credentials {
                username secrets.getProperty("maven_username")
                password secrets.getProperty("maven_password")
            }
        }
    }
}

curseforge {
    apiKey = secrets.getProperty("apiKey")
    project {
        id = '340666'
        releaseType = 'release'
        changelogType = 'markdown'
        changelog = file("changelog.md")
        addGameVersion 'Forge'
        addGameVersion 'Java 17'
        addGameVersion "$minecraft_version"
        mainArtifact(jar) {
            displayName = "ChemLib $version"
            relations {
                optionalDependency 'jei'
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}